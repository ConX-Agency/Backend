// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  user_id        Int    @id @default(autoincrement())
  full_name      String
  preferred_name String
  contact_number String
  email_address  String @unique
  username       String @unique
  password       String
  type           String
}

model Clients_Location {
  client_location_id Int     @id @default(autoincrement())
  client_id          Int
  client             Clients @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
  country            String
  city               String
  state              String
  postcode           String
  address            String
}

model Clients {
  client_id              Int                @id @default(autoincrement())
  company_name           String             @unique
  person_in_charge_name  String
  person_in_charge_email String
  company_email          String             @unique
  contact_number         String
  alt_contact_number     String
  industry               String
  cuisine_type           String
  tnc_consent            Boolean            @default(false)
  status                 String
  campaigns              Campaign[]
  addresses              Clients_Location[]
}

model Accounts {
  account_id             Int        @id @default(autoincrement())
  social_media_url       String
  follower_count         Int        @default(1)
  audience_focus_country String     @default("")
  platform_name          String
  platform_focus         String
  influencer_id          Int
  influencer             Influencer @relation(fields: [influencer_id], references: [influencer_id], onDelete: Cascade)
}

model Influencer {
  influencer_id      Int                    @id @default(autoincrement())
  full_name          String
  preferred_name     String
  contact_number     String
  alt_contact_number String
  email_address      String                 @unique
  country            String
  state              String
  city               String
  postcode           String
  address            String
  multiple_countries Boolean?               @default(false)
  additional_country String?                @default("")
  whatsapp_consent   Boolean
  whatsapp_invited   Boolean
  community_invited  Boolean
  industry           String
  invite_count       Int                    @default(0)
  tnc_consent        Boolean                @default(false)
  status             String
  platforms          Accounts[]
  campaigns          Influencers_Campaign[]
}

model Campaign {
  campaign_id                 Int                    @id @default(autoincrement())
  client_id                   Int
  campaign_name               String
  food_offering               String
  campaign_address            String
  package                     String
  feedback                    String
  max_pax                     Int
  booking_availability        String
  availability_public_holiday String
  start_date                  DateTime
  end_date                    DateTime
  is_halal                    Boolean
  slots                       Int
  slot_status                 String
  is_result                   Boolean
  campaign_status             String
  client                      Clients                @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
  influencers_campaign        Influencers_Campaign[]
}

model Influencers_Campaign {
  influencer_campaign_id   Int        @id @default(autoincrement())
  campaign_id              Int
  influencer_id            Int
  campaign_name            String
  full_name                String
  booking_datetime         DateTime
  pax_no                   Int
  type                     String
  social_media_handler     String
  is_due                   Boolean
  social_media_post        String
  review_posted            Boolean
  is_completed             Boolean
  influencer_response_date DateTime
  influencer               Influencer @relation(fields: [influencer_id], references: [influencer_id], onDelete: Cascade)
  campaign                 Campaign   @relation(fields: [campaign_id], references: [campaign_id], onDelete: Cascade)
}
